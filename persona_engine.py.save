import os
import json
from datetime import datetime

# ===== Persona Definitions (Age Range: 6–75) =====
default_personas = [
Last login: Wed Jun 25 00:04:45 on ttys000

The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
MacBook-Air-4:~ Justin$ cd ~/prometheus_app/prometheus_app
MacBook-Air-4:prometheus_app Justin$ source venv/bin/activate
(venv) MacBook-Air-4:prometheus_app Justin$ 
(venv) MacBook-Air-4:prometheus_app Justin$ nano persona_engine.py















  UW PICO 5.09                    File: persona_engine.py                       

import os
import json
from datetime import datetime
 
# ===== Persona Definitions (Age Range: 6–75) =====
default_personas = [
    {"name": "Lily", "age": 6, "media_habits": ["YouTube Kids"], "emotional_pro$
    {"name": "Aiden", "age": 13, "media_habits": ["TikTok", "YouTube"], "emotio$
    {"name": "Chloe", "age": 18, "media_habits": ["Snapchat", "Instagram"], "em$
    {"name": "Noah", "age": 25, "media_habits": ["Reddit", "X/Twitter"], "emoti$
    {"name": "Marcus", "age": 38, "media_habits": ["NPR", "X/Twitter"], "emotio$
    {"name": "Elaine", "age": 52, "media_habits": ["Facebook", "Fox News"], "em$
    {"name": "Walter", "age": 75, "media_habits": ["TV news", "local paper"], "$
]
        
SAVE_PATH = "logs/persona_log.json"   
        
def simulate_reaction(persona, headline):
    age = persona["age"]

^G Get Help  ^O WriteOut  ^R Read File ^Y Prev Pg   ^K Cut Text  ^C Cur Pos   
^X Exit      ^J Justify   ^W Where is  ^V Next Pg   ^U UnCut Text^T To Spell  
    {"name": "Lily", "age": 6, "media_habits": ["YouTube Kids"], "emotional_profile": "Curious, sensitive", "cognitive_traits": ["literal thinker"], "belief_log": [], "ideology": "neutral"},
    {"name": "Aiden", "age": 13, "media_habits": ["TikTok", "YouTube"], "emotional_profile": "Impressionable, reactive", "cognitive_traits": ["peer-influenced"], "belief_log": [], "ideology": "emerging"},
    {"name": "Chloe", "age": 18, "media_habits": ["Snapchat", "Instagram"], "emotional_profile": "Exploratory, values identity", "cognitive_traits": ["tribal alignment"], "belief_log": [], "ideology": "progressive"},
    {"name": "Noah", "age": 25, "media_habits": ["Reddit", "X/Twitter"], "emotional_profile": "Cynical, analytical", "cognitive_traits": ["confirmation-seeking"], "belief_log": [], "ideology": "mixed"},
    {"name": "Marcus", "age": 38, "media_habits": ["NPR", "X/Twitter"], "emotional_profile": "Stability-focused", "cognitive_traits": ["skeptical of trends"], "belief_log": [], "ideology": "moderate"},
    {"name": "Elaine", "age": 52, "media_habits": ["Facebook", "Fox News"], "emotional_profile": "Security-minded", "cognitive_traits": ["fears change"], "belief_log": [], "ideology": "conservative"},
    {"name": "Walter", "age": 75, "media_habits": ["TV news", "local paper"], "emotional_profile": "Traditionalist, routine-bound", "cognitive_traits": ["values consistency"], "belief_log": [], "ideology": "traditional"}
]

SAVE_PATH = "logs/persona_log.json"

def simulate_reaction(persona, headline):
    age = persona["age"]
    if age < 10:
        summary = "Doesn't understand it fully, feels uneasy."
        emotion = "confused/scared"
        trust = "low"
    elif age < 20:
        summary = "Feels personally affected, influenced by how others react."
        emotion = "anxious or excited"
        trust = "shifting"
    elif age < 35:
        summary = "Curious and reactive, split on trust."
        emotion = "mixed"
        trust = "medium"
    elif age < 60:
        summary = "Wants facts and context before reacting."
        emotion = "skeptical"
        trust = "moderate"
    else:
        summary = "Defaults to past experience and established media."
        emotion = "resigned or concerned"
        trust = "low to moderate"

    reaction = {
        "summary": summary,
        "emotion": emotion,
        "trust_level": trust,
        "ideology": persona.get("ideology", "neutral"),
        "note": f"Responds based on age {age} persona filter."
    }

    persona["belief_log"].append({
        "timestamp": datetime.now().isoformat(),
        "headline": headline,
        "reaction": reaction
    })

    return reaction

def run_simulation(personas, headline):
    results = []
    for p in personas:
        reaction = simulate_reaction(p, headline)
        results.append({"name": p["name"], "age": p["age"], "reaction": reaction})
    return results

def save_state():
    with open(SAVE_PATH, "w") as f:
        json.dump(current_personas, f, indent=2)

def load_personas():
    global current_personas
    if os.path.exists(SAVE_PATH):
        with open(SAVE_PATH, "r") as f:
            current_personas = json.load(f)
    else:
        current_personas = default_personas
    return current_personas

